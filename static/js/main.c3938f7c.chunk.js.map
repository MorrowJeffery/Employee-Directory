{"version":3,"sources":["utils/api.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Table","useState","employees","setEmployees","orderedEmployees","setOrderedEmployees","order","setOrder","useEffect","API","then","res","data","results","className","id","type","placeholder","aria-label","onChange","e","val","console","log","filteredEmployees","filter","emp","values","Object","join","toLowerCase","indexOf","handleChange","target","value","aria-hidden","scope","onClick","sort","x","y","first","name","toUpperCase","second","compare","last","length","map","employee","key","login","uuid","src","picture","medium","alt","cell","email","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+RAEe,EAEC,WACZ,OAAOA,IAAMC,IAAI,kDC4GNC,MA9Gf,WAAkB,IAAD,EACqBC,mBAAS,CAAC,KAD/B,mBACNC,EADM,KACKC,EADL,OAEmCF,mBAAS,IAF5C,mBAENG,EAFM,KAEYC,EAFZ,OAGaJ,mBAAS,cAHtB,mBAGNK,EAHM,KAGCC,EAHD,KA8Db,OA7CAC,qBAAU,WACNC,IAAmBC,MAAK,SAAAC,GACpBR,EAAaQ,EAAIC,KAAKC,SACtBR,EAAoBM,EAAIC,KAAKC,cAEjC,IAyCA,6BACI,yBAAKC,UAAU,8CACX,yBAAKA,UAAU,sBAAsBC,GAAG,aACpC,0BAAMD,UAAU,oCACZ,2BACIA,UAAU,yCACVE,KAAK,OACLC,YAAY,SACZC,aAAW,SACXC,SAAU,SAAAC,IAnElC,SAAsBC,GAClBC,QAAQC,IAAIF,GACZ,IAAIG,EAAoBtB,EAAUuB,QAAO,SAAAC,GACrC,IAAIC,EAASC,OAAOD,OAAOD,GACxBG,KAAK,IACLC,cAEH,OADER,QAAQC,IAAII,IACgC,IAAvCA,EAAOI,QAAQV,EAAIS,kBAE5BzB,EAAoBmB,GA0DcQ,CAAaZ,EAAEa,OAAOC,UAE1C,uBAAGpB,UAAU,gBAAgBqB,cAAY,YAIrD,2BAAOrB,UAAU,SACb,+BACI,4BACA,wBAAIsB,MAAM,OAAV,SACA,wBAAIC,QAAU,WAzDG9B,EAAb,cAAVD,EAAgC,aACtB,aAchBF,EAAiBkC,MAbjB,SAAiBC,EAAEC,GACf,IAAMC,EAAQF,EAAEG,KAAKD,MAAME,cACrBC,EAASJ,EAAEE,KAAKD,MAAME,cAExBE,EAAU,EAOd,OANIJ,EAAQG,EACRC,EAAU,EACHJ,EAAQG,IACfC,GAAW,GAED,eAAVvC,IAAwBuC,IAAY,GACjCA,MA4C+CT,MAAM,OAApD,SACA,wBAAIC,QAAU,WAxCC9B,EAAb,cAAVD,EAAgC,aACtB,aAchBF,EAAiBkC,MAbjB,SAAiBC,EAAEC,GACf,IAAMC,EAAQF,EAAEG,KAAKI,KAAKH,cACpBC,EAASJ,EAAEE,KAAKI,KAAKH,cAEvBE,EAAU,EAOd,OANIJ,EAAQG,EACRC,EAAU,EACHJ,EAAQG,IACfC,GAAW,GAED,eAAVvC,IAAwBuC,IAAY,GACjCA,MA2BgDT,MAAM,OAAnD,QACA,wBAAIA,MAAM,OAAV,gBACA,wBAAIA,MAAM,OAAV,mBAGJ,+BACKhC,EAAiB2C,OAAS,EACvB3C,EAAiB4C,KAAI,SAACC,GAAD,OACjB,wBAAIC,IAAKD,EAASE,MAAMC,MACpB,4BAAI,yBAAKC,IAAKJ,EAASK,QAAQC,OAAQC,IAAI,MAC3C,4BAAKP,EAASP,KAAKD,OACnB,4BAAKQ,EAASP,KAAKI,MACnB,4BAAKG,EAASQ,MACd,4BAAKR,EAASS,WAItB,4BACI,+CC5FbC,MARf,WACE,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,QCKc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9D,MAAK,SAAA+D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.c3938f7c.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all users\r\n  getEmployees: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport API from '../utils/api';\r\n\r\nfunction Table() {\r\n    const [employees, setEmployees] = useState([{}]);\r\n    const [orderedEmployees, setOrderedEmployees] = useState([]);\r\n    const [order, setOrder] = useState(\"descending\");\r\n\r\n    function handleChange(val) {\r\n        console.log(val);\r\n        let filteredEmployees = employees.filter(emp => {\r\n            let values = Object.values(emp)\r\n              .join(\"\")\r\n              .toLowerCase();\r\n              console.log(values)\r\n            return values.indexOf(val.toLowerCase()) !== -1;\r\n          });\r\n          setOrderedEmployees(filteredEmployees);\r\n    }\r\n\r\n    useEffect(() => {\r\n        API.getEmployees().then(res => {\r\n            setEmployees(res.data.results)\r\n            setOrderedEmployees(res.data.results)\r\n          });\r\n      },[]);\r\n\r\n      function employeeOrderByFirst() {\r\n          if (order === \"ascending\") setOrder(\"descending\")\r\n          else setOrder(\"ascending\")\r\n        function compare(x,y) {\r\n            const first = x.name.first.toUpperCase();\r\n            const second = y.name.first.toUpperCase();\r\n\r\n            let compare = 0;\r\n            if (first > second) {\r\n                compare = 1;\r\n            } else if (first < second) {\r\n                compare = -1;\r\n            }\r\n            if (order === \"descending\") compare *= -1\r\n            return compare;\r\n        }\r\n        orderedEmployees.sort(compare);\r\n      }\r\n      function employeeOrderByLast() {\r\n        if (order === \"ascending\") setOrder(\"descending\")\r\n        else setOrder(\"ascending\")\r\n      function compare(x,y) {\r\n          const first = x.name.last.toUpperCase();\r\n          const second = y.name.last.toUpperCase();\r\n\r\n          let compare = 0;\r\n          if (first > second) {\r\n              compare = 1;\r\n          } else if (first < second) {\r\n              compare = -1;\r\n          }\r\n          if (order === \"descending\") compare *= -1\r\n          return compare;\r\n      }\r\n      orderedEmployees.sort(compare);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-expand navbar-light bg-light\">\r\n                <div className=\"navbar-collapse row\" id=\"navbarNav\">\r\n                    <form className=\"form-inline active-cyan-4 center\">\r\n                        <input \r\n                            className=\"form-control form-control-sm mr-3 w-75\" \r\n                            type=\"text\" \r\n                            placeholder=\"Search\"\r\n                            aria-label=\"Search\"\r\n                            onChange={e => {handleChange(e.target.value)}}\r\n                            />\r\n                        <i className=\"fas fa-search\" aria-hidden=\"true\"></i>\r\n                    </form>\r\n                </div>\r\n            </nav>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                    <th scope=\"col\">Image</th>\r\n                    <th onClick={ () => {employeeOrderByFirst()}} scope=\"col\">First</th>\r\n                    <th onClick={ () => {employeeOrderByLast()}} scope=\"col\">Last</th>\r\n                    <th scope=\"col\">Phone Number</th>\r\n                    <th scope=\"col\">Email Address</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {orderedEmployees.length > 0 ? (\r\n                        orderedEmployees.map((employee) => (\r\n                            <tr key={employee.login.uuid}>\r\n                                <td><img src={employee.picture.medium} alt=\"\"></img></td>\r\n                                <td>{employee.name.first}</td>\r\n                                <td>{employee.name.last}</td>\r\n                                <td>{employee.cell}</td>\r\n                                <td>{employee.email}</td>\r\n                            </tr>\r\n                        ))\r\n                    ) : (\r\n                        <tr>\r\n                            <th>No Content</th>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","import React from 'react';\nimport './App.css';\nimport Table from './components/Table'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}